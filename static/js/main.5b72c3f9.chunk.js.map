{"version":3,"sources":["config/trigger.js","assets/images sync nonrecursive //.(png|jpe?g|svg)$","assets/images/blue_payout_correct_10.png","assets/images/blue_payout_correct_100.png","config/main.js","lib/markup/photodiode.js","lib/markup/eventMarkerMessage.js","trials/holdUpMarker.js","lib/markup/stimuli.js","timelines/preamble.js","lib/utils.js","lib/markup/earnings.js","timelines/taskTrial.js","timelines/taskBlock.js","lib/taskUtils.js","config/practice.js","config/tutorial.js","config/experiment.js","trials/quizTrials.js","timelines/main.js","firebase.js","App.js","index.js"],"names":["module","exports","eventCodes","fixation","evidence","show_earnings","test_connect","open_task","map","./blue_payout_correct_10.png","./blue_payout_correct_100.png","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","p","MTURK","jsPsych","turk","turkInfo","outsideTurk","IS_ELECTRON","window","require","_unused","lang","mlang","_","merge","defaultBlockSettings","conditions","repeats_per_condition","is_practice","is_tutorial","photodiode_active","config","init","USE_PHOTODIODE","USE_EEG","USE_ELECTRON","USE_MTURK","electron","ipcRenderer","eventMarkerMessage","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","concat","eventMarker","found","stop","apply","this","arguments","holdUpMarker","type","stimulus","element","prompt","length","undefined","centered","baseStimulus","class_","photodiodeGhostBox","focus","choices","continue","button","on_load","then","s","document","getElementById","innerHTML","console","log","process","r","preamble","timeline","showMessage","responseType","message","task","name","responseEndsTrial","buttons","userId","setIdMessage","userid","set","defaultId","REACT_APP_PATIENT_ID","duration","setting_up","taskCode","numBlinks","sleep","ms","Promise","setTimeout","deepCopy","obj","JSON","parse","stringify","earningsDisplay","earnings","parseFloat","toFixed","taskTrial","blockSettings","blockDetails","condition","onstart","Math","random","taskBlock","startingOpts","startingOptions","c","range","shuffle","flatten","generateStartingOpts","block_earnings","optimal_earnings","continue_block","blockStart","trial_duration","on_finish","data","block_settings","unshift","practiceBlock","tutorialBlock","exptBlock1","exptBlock2","ask","quiz","age","res","answer","stmAge","ageCheck","survey","stmSl","direction","slider","right","sliderCheck","abstain","surveyPreamble1","survey_1","surveyPreamble2","ius","iusOptions","options","not","little","somewhat","very","entirely","iusPrompts","upset","frustration","full_life","surprise_avoid","unforeseen_spoil","uncertainty_paralysis","uncertainty_malfunction","future","surprise_intolerance","doubt_paralysis","organize","escape","iusSurvey","multiSurvey","prompts","ansChoices","debriefOptions","debriefing","confirm_completion","debrief","demographicsAge","demographics_age","demographicsPreamble1","demo_1","demographicsPreamble2","demo_2","demographicsPreamble3","demo_3","openAnswerQuestions","demoMultiChoiceOptions","ethnicity","demographics_ethnicity","hispanic_latino","no_hispanic_latino","race","demographics_race","asian","african_american","caucasian","native_american_alaskan","native_hawaiian_pacific_islander","other","yesNo","demographics_binary","yes","no","gender","demographics_gender","female","male","demoMultiChoicePrompts","demographics_english","multiChoiceQuestions","diagnosesQuestions","diagnoses","diagnosesOptions","demographics_diagnoses","parkinsons","schizophrenia","ocd","depression","demographics","primaryTimeline","countdown","message1","message2","end","mturkTimeline","tl","db","apiKey","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","databaseURL","REACT_APP_databaseURL","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","firebase","initializeApp","firestore","addToFirebase","patientId","patient_id","collection","doc","trial_index","TimeStamp","GeoPoint","psiturk","lodash","noConflict","PsiTurk","workerId","assignmentId","getTurkUniqueId","FIREBASE","App","react_default","createElement","className","experiment","settings","on_data_update","dateCreated","Date","send","recordTrialData","saveData","completeHIT","completePsiturk","get","localSave","React","Component","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.5b72c3f9.chunk.js","sourcesContent":["// NOTE - these event codes must match what is in public/config/trigger.js\nconst eventCodes = {\n\tfixation: 1,\n\tevidence: 5,\n\tshow_earnings: 7,\n\ttest_connect: 32,\n\topen_task: 18\n}\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n\teventCodes\n}\n","var map = {\n\t\"./blue_payout_correct_10.png\": 50,\n\t\"./blue_payout_correct_100.png\": 51\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 49;","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_10.f515a81e.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_100.ae2416c7.png\";","// config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settins can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from 'jspsych-react'\nimport _ from 'lodash'\nimport { eventCodes } from './trigger'\nimport {init} from '@brown-ccv/behavioral-task-trials'\n\n// mapping of letters to key codes\nconst keys = {\n\t\"A\": 65,\n\t\"B\": 66,\n\t\"C\": 67,\n\t\"F\": 70,\n\t\"J\": 74,\n\t\"space\": 32\n}\n\n// audio codes\nconst audioCodes = {\n\tfrequency: 100*(eventCodes.open_task - 9),\n\ttype: 'sine'\n}\n\n// is this mechanical turk?\nconst MTURK = (!jsPsych.turk.turkInfo().outsideTurk)\nconst AT_HOME = (process.env.REACT_APP_AT_HOME === 'true')\nlet IS_ELECTRON = true\n\ntry {\n\twindow.require('electron')\n} catch {\n\tIS_ELECTRON = false\n}\n\n// get language file\nconst lang = require('../language/en_us.json')\nif (MTURK) { // if this is mturk, merge in the mturk specific language\n  const mlang = require('../language/en_us.mturk.json')\n\t_.merge(lang, mlang)\n}\n\nconst defaultBlockSettings = {\n\tconditions: [\"a\", \"b\", \"c\"],\n\trepeats_per_condition: 1, // number of times every condition is repeated\n\tis_practice: false,\n\tis_tutorial: false,\n\tphotodiode_active: false\n}\n\n// setting config for trials\nconst config = init({USE_PHOTODIODE: !AT_HOME && IS_ELECTRON,  USE_EEG: false, USE_ELECTRON: IS_ELECTRON, USE_MTURK: MTURK})\n\nexport {\n\tkeys,\n\tdefaultBlockSettings,\n\tlang,\n\teventCodes,\n\tconfig,\n\tAT_HOME,\n\taudioCodes\n}\n","import { config } from  '../../config/main'\nimport { eventCodes } from '../../config/trigger'\nimport $ from 'jquery'\n\n// conditionally load electron and psiturk based on MTURK config variable\nlet ipcRenderer = false;\nif (config.IS_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n\tconst class_ = (!config.USE_PHOTODIODE) ? 'invisible' : 'visible'\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`\n\treturn markup\n}\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n      $('.photodiode-spot').css({\"background-color\": \"black\"})\n      setTimeout(() => {\n        $('.photodiode-spot').css({\"background-color\": \"white\"})\n        callback()\n      }, ms)\n    }\n\n    function repeat_pulse_for(ms, i) {\n      if (i > 0) {\n        pulse_for(ms, () => {\n          setTimeout(() => {\n            repeat_pulse_for(ms, i-1)\n          }, ms)\n        })\n      }\n    }\n\n\t\tif (config.USE_PHOTODIODE) {\n\t\t\t\tconst blinkTime = 40\n\t\t\t\tlet numBlinks = taskCode\n\t\t    if (taskCode < eventCodes.open_task) numBlinks = 1;\n\t\t\t\trepeat_pulse_for(blinkTime, numBlinks)\n\t\t\t\tif ( ipcRenderer ) ipcRenderer.send('trigger', taskCode)\n\t\t\t}\n\t\t}\n\nexport {\n\tphotodiodeGhostBox,\n\tpdSpotEncode\n}\n","import { lang } from '../../config/main'\n\nconst eventMarkerMessage = async () => {\n\t\treturn `<span style=\"color: green;\">${lang.eventMarker.found}</span>`\n}\n\nexport default eventMarkerMessage\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport eventMarkerMessage from '../lib/markup/eventMarkerMessage'\n\nconst holdUpMarker = () => {\n  let stimulus = baseStimulus(`<div><h2 id='usb-alert'></h2></div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    prompt: [`<br><h3>${lang.prompt.focus}</h3>`],\n    choices: [lang.prompt.continue.button],\n    on_load: () => (eventMarkerMessage()\n                      .then(s => document.getElementById('usb-alert')\n                      .innerHTML = s )\n                    )\n  }\n}\n\nexport default holdUpMarker\n","const baseStimulus = (element, prompt = false, centered = false) => {\n  const class_ = centered\n    ? \"center_container\"\n    : prompt\n    ? \"main-prompt\"\n    : \"main\";\n  return `<div class=${class_}>${element}</div>`;\n};\n\nexport { baseStimulus };\n","import { jsPsych } from \"jspsych-react\";\nimport { eventCodes, lang } from \"../config/main\";\nimport holdUpMarker from \"../trials/holdUpMarker\";\nimport { showMessage, userId } from \"@brown-ccv/behavioral-task-trials\";\nimport { config, AT_HOME } from \"../config/main\";\nconsole.log(\"at_home\", AT_HOME);\nconsole.log(\"env at home\", process.env.REACT_APP_AT_HOME);\n\nconst preamble = {\n  type: \"html_keyboard_response\",\n  stimulus: \"\",\n  timeline: !config.USE_PHOTODIODE\n    ? [\n        showMessage(config, {\n          responseType: \"html_button_response\",\n          message: lang.task.name,\n          responseEndsTrial: true,\n          buttons: [lang.prompt.continue.button],\n        }),\n        userId(jsPsych, config, {\n          duration: 800,\n          setIdMessage: lang.userid.set,\n        }),\n      ]\n    : [\n        showMessage(config, {\n          responseType: \"html_button_response\",\n          message: lang.task.name,\n          responseEndsTrial: true,\n          buttons: [lang.prompt.continue.button],\n        }),\n        userId(jsPsych, config, {\n          setIdMessage: lang.userid.set,\n          defaultId: process.env.REACT_APP_PATIENT_ID,\n        }),\n        holdUpMarker(),\n        showMessage(config, {\n          duration: 2000,\n          message: lang.prompt.setting_up,\n          taskCode: eventCodes.open_task,\n          numBlinks: eventCodes.open_task,\n        }),\n      ],\n};\n\nexport default preamble;\n","import { jsPsych } from 'jspsych-react'\nimport requireContext from 'require-context.macro'\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\n// import images\nconst importAll = (r) => {\n  return r.keys().map(r);\n}\n\nconst images = importAll(requireContext('../assets/images', false, /\\.(png|jpe?g|svg)$/));\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getUserId = (data) => {\n  const patientId = JSON.parse(data.responses)['Q0']\n  jsPsych.data.addProperties({patient_id: patientId, timestamp: Date.now()})\n  console.log(\"ID\", patientId)\n}\n\nconst beep = (audioCodes) => {\n  const context = new AudioContext()\n  const o = context.createOscillator()\n  const g = context.createGain()\n  o.type = audioCodes.type\n  o.connect(g)\n  o.frequency.setValueAtTime(audioCodes.frequency, 0)\n  console.log(context.currentTime)\n  g.connect(context.destination)\n  o.start()\n  o.stop(context.currentTime + 0.4)\n}\n\n\nexport {\n  sleep,\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  images,\n  startKeypressListener,\n  getUserId,\n  getTurkUniqueId,\n  beep\n}\n","import { formatDollars } from '../utils'\n\nconst earningsDisplay = (earnings) => {\n  const bclass = (earnings >= 0) ? 'success' : 'danger'\n  return (\n    `<div class='center_container'>\n    <h1 class='text-${bclass}'>${formatDollars(earnings)}</h1>\n    </div>`\n  )\n}\n\nexport {\n  earningsDisplay\n}\n","// import trials\nimport { showMessage, fixation } from \"@brown-ccv/behavioral-task-trials\";\nimport { config } from \"../config/main\";\nimport { eventCodes } from \"../config/main\";\nimport { earningsDisplay } from \"../lib/markup/earnings\";\n\nconst taskTrial = (blockSettings, blockDetails, condition) => {\n  // timeline\n  let timeline = [\n    // fixation\n    fixation(config, {\n      duration: 650,\n    }),\n    // show condition\n    showMessage(config, {\n      message: condition,\n      onstart: true,\n      taskCode: eventCodes.evidence,\n    }),\n    fixation(config, {\n      duration: 650,\n    }),\n    // end the trial\n    showMessage(config, {\n      stimulus: earningsDisplay(Math.random()),\n      taskCode: eventCodes.show_earnings,\n    }),\n  ];\n\n  return {\n    type: \"html_keyboard_response\",\n    timeline: timeline,\n  };\n};\n\nexport default taskTrial;\n","import taskTrial from './taskTrial'\nimport { generateStartingOpts } from '../lib/taskUtils'\n\nconst taskBlock = (blockSettings) => {\n  // initialize block\n\tconst startingOpts = generateStartingOpts(blockSettings)\n\n  const blockDetails = {\n\t  block_earnings: 0.0,\n\t\toptimal_earnings: 0.0,\n\t\tcontinue_block: true\n\t}\n\n\t// timeline = loop through trials\n\tlet timeline = startingOpts.map( (condition) => taskTrial(blockSettings, blockDetails, condition))\n\n\tlet blockStart = {\n\t\ttype: 'html_keyboard_response',\n\t\tstimulus: '',\n\t\ttrial_duration: 1,\n\t\ton_finish: (data) => data.block_settings = blockSettings\n\t}\n\n\ttimeline.unshift(blockStart)\n\n  return {\n\t\ttype: 'html_keyboard_response',\n\t\ttimeline: timeline\n\t}\n}\n\nexport default taskBlock\n","// utilities specific to this app/task\n\nimport _ from 'lodash'\n\n// initialize starting conditions for each trial within a block\nconst generateStartingOpts = (blockSettings) => {\n\tlet startingOptions = blockSettings.conditions.map( (c) => {\n\t\t// Repeat each starting condition the same number of times\n\t\treturn _.range(blockSettings.repeats_per_condition).map( () => c )\n\t})\n\n\treturn _.shuffle(_.flatten(startingOptions))\n}\n\n\nexport {\n\tgenerateStartingOpts\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// PRACTICE BLOCK SETTINGS\n\n// create copy of default settings\nlet practiceBlock = deepCopy(defaultBlockSettings)\n\npracticeBlock.conditions = [\"m\", \"n\"]\npracticeBlock.repeats_per_condition = 1\n\npracticeBlock.is_practice = true\n\n// export the settings\nexport {\n\tpracticeBlock\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// TUTORIAL SETTINGS\n\n// create copy of default settings\nlet tutorialBlock = deepCopy(defaultBlockSettings)\n\n// update default settings for tutorial\ntutorialBlock.is_tutorial = true\ntutorialBlock.photodiode_active = false\n\n// export the settings\nexport {\n\ttutorialBlock\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// FIRST EXPERIMENT BLOCK SETTINGS\n\n// create copy of default settings\nlet exptBlock1 = deepCopy(defaultBlockSettings)\n\nexptBlock1.repeats_per_condition = 2\n\n// SECOND EXPERIMENT BLOCK SETTINGS\n\n// create copy of default settings\nlet exptBlock2 = deepCopy(defaultBlockSettings)\n\nexptBlock2.conditions = [\"e\", \"f\"]\nexptBlock2.repeats_per_condition = 2\n\nexport {\n  exptBlock1,\n  exptBlock2,\n}\n","import { lang, config } from \"../config/main\";\nimport {\n  survey,\n  slider,\n  multiSurvey,\n  showMessage,\n} from \"@brown-ccv/behavioral-task-trials\";\n\n// Age Check\nconst ask = lang.quiz.ask.age;\nconst res = lang.quiz.answer.age;\nconst stmAge = `<div class='instructions'><h1>${ask}<br><b>${res}</b></div>`;\n\nconst ageCheck = survey({ stimulus: stmAge });\n\n// Slider Check\nconst stmSl = lang.quiz.direction.slider.right;\n\nconst sliderCheck = slider(stmSl);\n\nconst abstain = `${lang.quiz.answer.abstain}`; // give people choice to abstain\n// Survey page headers\nconst surveyPreamble1 = lang.quiz.prompt.preamble.survey_1;\nconst surveyPreamble2 = lang.quiz.prompt.ius.preamble;\n\n// Intolerance of Uncertainty (IUS) Scale\nconst iusOptions = {\n  options: [\n    `${lang.quiz.answer.ius.not}`,\n    `${lang.quiz.answer.ius.little}`,\n    `${lang.quiz.answer.ius.somewhat}`,\n    `${lang.quiz.answer.ius.very}`,\n    `${lang.quiz.answer.ius.entirely}`,\n    abstain,\n  ],\n};\n\nconst iusPrompts = [\n  `${lang.quiz.prompt.ius.upset}`,\n  `${lang.quiz.prompt.ius.frustration}`,\n  `${lang.quiz.prompt.ius.full_life}`,\n  `${lang.quiz.prompt.ius.surprise_avoid}`,\n  `${lang.quiz.prompt.ius.unforeseen_spoil}`,\n  `${lang.quiz.prompt.ius.uncertainty_paralysis}`,\n  `${lang.quiz.prompt.ius.uncertainty_malfunction}`,\n  `${lang.quiz.prompt.ius.future}`,\n  `${lang.quiz.prompt.ius.surprise_intolerance}`,\n  `${lang.quiz.prompt.ius.doubt_paralysis}`,\n  `${lang.quiz.prompt.ius.organize}`,\n  `${lang.quiz.prompt.ius.escape}`,\n];\n\nconst iusSurvey = multiSurvey({\n  preamble: [surveyPreamble1 + surveyPreamble2],\n  prompts: iusPrompts,\n  ansChoices: iusOptions,\n});\n\n// Debrief Page (non-mTurk)\nconst debriefOptions = lang.quiz.answer.debriefing.confirm_completion;\nconst debrief = showMessage(config, {\n  responseType: \"html_button_response\",\n  responseEndsTrial: true,\n  buttons: [debriefOptions],\n});\n\n// START of Demographics Questionnaires\nconst demographicsAge = lang.quiz.ask.demographics_age;\nconst demographicsPreamble1 = lang.quiz.prompt.preamble.demo_1;\nconst demographicsPreamble2 = lang.quiz.prompt.preamble.demo_2;\nconst demographicsPreamble3 = lang.quiz.prompt.preamble.demo_3;\n\nconst openAnswerQuestions = survey({\n  preamble: demographicsPreamble1,\n  stimulus: demographicsAge,\n});\n\n// multi_choice_questions\nconst demoMultiChoiceOptions = {\n  ethnicity: [\n    lang.quiz.answer.demographics_ethnicity.hispanic_latino,\n    lang.quiz.answer.demographics_ethnicity.no_hispanic_latino,\n  ],\n  race: [\n    `${lang.quiz.answer.demographics_race.asian}`,\n    `${lang.quiz.answer.demographics_race.african_american}`,\n    `${lang.quiz.answer.demographics_race.caucasian}`,\n    `${lang.quiz.answer.demographics_race.native_american_alaskan}`,\n    `${lang.quiz.answer.demographics_race.native_hawaiian_pacific_islander}`,\n    `${lang.quiz.answer.demographics_race.other}`,\n  ],\n  yesNo: [\n    lang.quiz.answer.demographics_binary.yes,\n    lang.quiz.answer.demographics_binary.no,\n  ],\n  gender: [\n    lang.quiz.answer.demographics_gender.female,\n    lang.quiz.answer.demographics_gender.male,\n    lang.quiz.answer.demographics_gender.other,\n  ],\n};\n\nconst demoMultiChoicePrompts = [\n  `${lang.quiz.ask.demographics_ethnicity}`,\n  `${lang.quiz.ask.demographics_race}`,\n  `${lang.quiz.ask.demographics_english}`,\n  `${lang.quiz.ask.demographics_gender}`,\n];\n\nconst multiChoiceQuestions = multiSurvey({\n  preamble: demographicsPreamble2,\n  prompts: demoMultiChoicePrompts,\n  ansChoices: demoMultiChoiceOptions,\n});\n\n// multi_select_questions\nconst diagnosesQuestions = lang.quiz.ask.diagnoses;\n\nconst diagnosesOptions = {\n  diagnoses: [\n    lang.quiz.answer.demographics_diagnoses.no,\n    lang.quiz.answer.demographics_diagnoses.parkinsons,\n    lang.quiz.answer.demographics_diagnoses.schizophrenia,\n    lang.quiz.answer.demographics_diagnoses.ocd,\n    lang.quiz.answer.demographics_diagnoses.depression,\n  ],\n};\n\nconst multiSelectQuestions = multiSurvey({\n  responseType: \"survey_multi_select\",\n  preamble: demographicsPreamble3,\n  prompts: [diagnosesQuestions],\n  ansChoices: diagnosesOptions,\n});\n\n// demographics\nconst demographics = {\n  timeline: [\n    openAnswerQuestions, // age, sex\n    multiChoiceQuestions, // ethnicity, race, english_fluency\n    multiSelectQuestions, // diagnoses\n  ],\n};\n\nexport { ageCheck, sliderCheck, iusSurvey, debrief, demographics };\n","import preamble from \"./preamble\";\nimport { showMessage, countdown } from \"@brown-ccv/behavioral-task-trials\";\nimport taskBlock from \"./taskBlock\";\n\nimport { lang, config } from \"../config/main\";\nimport { practiceBlock } from \"../config/practice\";\nimport { tutorialBlock } from \"../config/tutorial\";\nimport { exptBlock1, exptBlock2 } from \"../config/experiment\";\nimport {\n  ageCheck,\n  sliderCheck,\n  demographics,\n  iusSurvey,\n  debrief,\n} from \"../trials/quizTrials\";\n\nconst primaryTimeline = [\n  preamble,\n  ageCheck,\n  sliderCheck,\n  countdown({ message: lang.countdown.message1 }),\n  taskBlock(practiceBlock),\n  countdown({ message: lang.countdown.message2 }),\n  taskBlock(exptBlock1),\n  demographics,\n  iusSurvey,\n  debrief,\n  showMessage(config, {\n    duration: 5000,\n    message: lang.task.end,\n  }),\n];\n\nconst mturkTimeline = [\n  preamble,\n  countdown({ message: lang.countdown.message1 }),\n  taskBlock(tutorialBlock),\n  countdown({ message: lang.countdown.message2 }),\n  taskBlock(exptBlock2),\n  showMessage(config, {\n    duration: 5000,\n    message: lang.task.end,\n  }),\n];\n\nexport const tl = config.USE_MTURK ? mturkTimeline : primaryTimeline;\n","import firebase from 'firebase'\nrequire('dotenv').config()\n\nconst taskName = 'test'\nconst config = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    databaseURL: process.env.REACT_APP_databaseURL,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId\n};\n// Get a Firestore instance\nlet db;\ntry {\n    db = firebase.initializeApp(config).firestore()\n} catch {\n    console.log(\"WARNING: Firease not connected\");\n}\n\n// Add data to db\nconst createFirebaseDocument = (patientId) => {\n    db.collection(taskName).doc(patientId).set({patientId, dateCreated: new Date()})\n}\n\n// create a document in the collection with a random id\nconst createFirebaseDocumentRandom = () => {\n    db.collection(taskName).add({dateCreated: new Date()}) \n}\n\nconst addToFirebase = (data) => {\n    const patientId = data.patient_id\n    db\n        .collection(taskName)\n        .doc(patientId)\n        .collection('data')\n        .doc(`trial_${data.trial_index}`)\n        .set(data)\n\n}\n\n// Export types that exists in Firestore\n// This is not always necessary, but it's used in other examples\nconst { TimeStamp, GeoPoint } = firebase.firestore\nexport { db, TimeStamp, GeoPoint, createFirebaseDocument, addToFirebase, createFirebaseDocumentRandom }\n\n\nexport default firebase;\n","import React from 'react'\nimport { Experiment, jsPsych } from 'jspsych-react'\nimport { tl } from './timelines/main'\nimport { config } from './config/main'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport { getTurkUniqueId, sleep } from './lib/utils'\nimport { addToFirebase, createFirebaseDocument } from './firebase.js'\n\nlet ipcRenderer = false;\nlet psiturk = false\nif (config.IS_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n} else if (config.USE_MTURK) {\n  /* eslint-disable */\n  window.lodash = _.noConflict()\n  psiturk = new PsiTurk(getTurkUniqueId(), '/complete')\n  /* eslint-enable */\n}\nconst firebase = process.env.FIREBASE;\n\nclass App extends React.Component {\n  render() {\n    console.log(\"Outside Turk:\", jsPsych.turk.turkInfo().outsideTurk)\n    console.log(\"Turk:\", config.USE_MTURK)\n\n    return (\n      <div className=\"App\">\n        <Experiment settings={{\n          timeline: tl,\n          on_data_update: (data) => {\n            if (firebase) {\n              if (data.trial_index === 1 ) {\n                console.log(data.patient_id)\n                createFirebaseDocument(data.patient_id)\n                addToFirebase(data)\n              }\n              if ((data.trial_index > 1 )) {\n                addToFirebase(data)\n              }\n            }\n            if ( ipcRenderer ) {\n              ipcRenderer.send('data', data)\n            }\n            else if (psiturk) {\n                psiturk.recordTrialData(data)\n            }\n          },\n          on_finish: (data) => {\n            if ( ipcRenderer ) {\n              ipcRenderer.send('end', 'true')\n            }\n            else if (psiturk) {\n              const completePsiturk = async () => {\n                psiturk.saveData()\n                await sleep(5000)\n                psiturk.completeHIT()\n              }\n              completePsiturk()\n            } else {\n              jsPsych.data.get().localSave('csv','neuro-task.csv');\n            }\n          },\n        }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}