{"version":3,"sources":["lib/utils.js","lib/markup/photodiode.js","lib/markup/stimuli.js","config/trigger.js","config/main.js","trials/camera.js","assets/images sync nonrecursive //.(png|jpe?g|svg)$","assets/images/blue_payout_correct_10.png","assets/images/blue_payout_correct_100.png","components/Login.jsx","lib/markup/eventMarkerMessage.js","trials/holdUpMarker.js","trials/startCode.js","timelines/preamble.js","timelines/taskTrial.js","lib/markup/earnings.js","timelines/taskBlock.js","lib/taskUtils.js","config/practice.js","config/tutorial.js","config/experiment.js","trials/quizTrials.js","timelines/main.js","components/JsPsychExperiment.jsx","firebase.js","App.jsx","index.js"],"names":["__webpack_require__","d","__webpack_exports__","sleep","deepCopy","formatDollars","getProlificId","getTurkUniqueId","beep","r","jspsych_react__WEBPACK_IMPORTED_MODULE_0__","ms","Promise","resolve","setTimeout","obj","JSON","parse","stringify","amount","parseFloat","toFixed","keys","map","turkInfo","jsPsych","turk","concat","workerId","assignmentId","variable","vars","window","location","search","substring","split","i","length","pair","decodeURIComponent","getQueryVariable","audioCodes","context","AudioContext","o","createOscillator","g","createGain","type","connect","frequency","setValueAtTime","console","log","currentTime","destination","start","stop","photodiodeGhostBox","pdSpotEncode","_config_main__WEBPACK_IMPORTED_MODULE_0__","_config_trigger__WEBPACK_IMPORTED_MODULE_1__","jquery__WEBPACK_IMPORTED_MODULE_2__","jquery__WEBPACK_IMPORTED_MODULE_2___default","n","ipcRenderer","config","USE_ELECTRON","electron","require","class_","USE_PHOTODIODE","taskCode","numBlinks","eventCodes","open_task","repeat_pulse_for","callback","$","css","background-color","pulse_for","send","baseStimulus","element","prompt","arguments","undefined","centered","module","exports","fixation","evidence","show_earnings","test_connect","taskName","defaultBlockSettings","lang","lodash__WEBPACK_IMPORTED_MODULE_1__","lodash__WEBPACK_IMPORTED_MODULE_1___default","_trigger__WEBPACK_IMPORTED_MODULE_2__","_brown_ccv_behavioral_task_trials__WEBPACK_IMPORTED_MODULE_3__","_lib_utils__WEBPACK_IMPORTED_MODULE_4__","USE_MTURK","outsideTurk","USE_PROLIFIC","USE_FIREBASE","process","REACT_APP_FIREBASE","_unused","USE_CAMERA","REACT_APP_VIDEO","USE_EEG","mlang","_","merge","conditions","repeats_per_condition","is_practice","is_tutorial","photodiode_active","init","USE_VOLUME","cameraStart","document","title","markup","instructions","camera","stimulus","choices","continue","button","response_ends_trial","on_load","participantId","data","get","values","participant_id","getElementById","handleEvents","stream","recorder","srcObject","recordedChunks","MediaRecorder","mimeType","addEventListener","e","size","push","blob","media","reader","FileReader","fileName","Date","now","onload","readyState","buffer","Buffer","result","readAsArrayBuffer","saveBlob","Blob","navigator","mediaDevices","getUserMedia","video","then","desktopCapturer","getSources","types","_ref","Object","_home_runner_work_honeycomb_honeycomb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_runner_work_honeycomb_honeycomb_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","sources","_iterator","_step","source","wrap","_context","prev","next","_home_runner_work_honeycomb_honeycomb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__","s","done","value","name","mandatory","chromeMediaSource","chromeMediaSourceId","id","catch","error","err","f","_x","apply","this","on_finish","cameraCapture","screenCapture","alert","cameraEnd","duration","task","recording_end","trial_duration","./blue_payout_correct_10.png","./blue_payout_correct_100.png","webpackContext","req","webpackContextResolve","Error","code","p","Login","onLogin","envParticipantId","envStudyId","validationFunction","_useState","useState","_useState2","slicedToArray","setParticipant","_useState3","_useState4","studyId","setStudy","_useState5","_useState6","setError","useEffect","react_default","createElement","className","role","Form","onSubmit","preventDefault","loggedIn","Group","controlId","Label","Control","autoFocus","onChange","target","Button","style","width","block","disabled","eventMarkerMessage","asyncToGenerator","regenerator_default","abrupt","eventMarker","found","holdUpMarker","focus","innerHTML","startCode","setting_up","timeline","showMessage","responseType","message","responseEndsTrial","buttons","preamble","taskTrial","blockSettings","blockDetails","condition","earnings","onstart","Math","random","taskBlock","startingOpts","startingOptions","c","range","shuffle","flatten","generateStartingOpts","block_earnings","optimal_earnings","continue_block","blockStart","block_settings","unshift","practiceBlock","tutorialBlock","exptBlock1","exptBlock2","ask","quiz","age","res","answer","stmAge","ageCheck","survey","stmSl","direction","slider","right","sliderCheck","abstain","surveyPreamble1","survey_1","surveyPreamble2","ius","iusOptions","options","not","little","somewhat","very","entirely","iusPrompts","upset","frustration","full_life","surprise_avoid","unforeseen_spoil","uncertainty_paralysis","uncertainty_malfunction","future","surprise_intolerance","doubt_paralysis","organize","escape","iusSurvey","multiSurvey","prompts","ansChoices","debriefOptions","debriefing","confirm_completion","debrief","demographicsAge","demographics_age","demographicsPreamble1","demo_1","demographicsPreamble2","demo_2","demographicsPreamble3","demo_3","openAnswerQuestions","demoMultiChoiceOptions","ethnicity","demographics_ethnicity","hispanic_latino","no_hispanic_latino","race","demographics_race","asian","african_american","caucasian","native_american_alaskan","native_hawaiian_pacific_islander","other","yesNo","demographics_binary","yes","no","gender","demographics_gender","female","male","demoMultiChoicePrompts","demographics_english","multiChoiceQuestions","diagnosesQuestions","diagnoses","diagnosesOptions","demographics_diagnoses","parkinsons","schizophrenia","ocd","depression","demographics","primaryTimeline","countdown","message1","message2","splice","end","mturkTimeline","tl","JsPsychExperiment","dataUpdateFunction","dataFinishFunction","experiment","settings","on_data_update","apiKey","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","databaseURL","REACT_APP_databaseURL","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","db","firebase","initializeApp","firestore","hostname","useEmulator","initParticipant","startDate","collection","doc","set","start_time","app_version","appVersion","app_platform","platform","results","addToFirebase","study_id","start_date","update","FieldValue","arrayUnion","App","toISOString","setLogin","setRenderer","psiturk","setPsiturk","_useState7","_useState8","setEnvParticipantId","_useState9","_useState10","setEnvStudyId","_useState11","_useState12","currentMethod","setMethod","_useState13","_useState14","reject","setReject","query","URLSearchParams","defaultValidation","defaultFunction","setLoggedIn","useCallback","addProperties","task_version","version","credentials","sendSync","lodash","noConflict","turkId","PsiTurk","pID","Fragment","components_JsPsychExperiment","desktop","mturk","recordTrialData","default","_ref2","_callee2","_context2","saveData","completeHIT","completePsiturk","localSave","components_Login","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.c7fc8de5.chunk.js","sourcesContent":["import { jsPsych } from 'jspsych-react'\nimport requireContext from 'require-context.macro'\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\n// import images\nconst importAll = (r) => {\n  return r.keys().map(r);\n}\n\nconst images = importAll(requireContext('../assets/images', false, /\\.(png|jpe?g|svg)$/));\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getQueryVariable = (variable) => {\n  let query = window.location.search.substring(1);\n  let vars = query.split(\"&\");\n  for (let i = 0; i < vars.length; i++) {\n    let pair = vars[i].split(\"=\");\n    if (decodeURIComponent(pair[0]) === variable) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n};\n\nconst getProlificId = () => {\n  const prolificId = getQueryVariable(\"PROLIFIC_PID\");\n  return prolificId\n};\n\nconst beep = (audioCodes) => {\n  const context = new AudioContext()\n  const o = context.createOscillator()\n  const g = context.createGain()\n  o.type = audioCodes.type\n  o.connect(g)\n  o.frequency.setValueAtTime(audioCodes.frequency, 0)\n  console.log(context.currentTime)\n  g.connect(context.destination)\n  o.start()\n  o.stop(context.currentTime + 0.4)\n}\n\n\nexport {\n  sleep,\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  images,\n  startKeypressListener,\n  getProlificId,\n  getTurkUniqueId,\n  beep\n}\n","import { config } from \"../../config/main\";\nimport { eventCodes } from \"../../config/trigger\";\nimport $ from \"jquery\";\n\n// conditionally load electron and psiturk based on MTURK config variable\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require(\"electron\");\n  ipcRenderer = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n  const class_ = config.USE_PHOTODIODE ? \"visible\" : \"invisible\";\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`;\n  return markup;\n};\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n    $(\".photodiode-spot\").css({ \"background-color\": \"black\" });\n    setTimeout(() => {\n      $(\".photodiode-spot\").css({ \"background-color\": \"white\" });\n      callback();\n    }, ms);\n  }\n\n  function repeat_pulse_for(ms, i) {\n    if (i > 0) {\n      pulse_for(ms, () => {\n        setTimeout(() => {\n          repeat_pulse_for(ms, i - 1);\n        }, ms);\n      });\n    }\n  }\n\n  if (config.USE_PHOTODIODE) {\n    const blinkTime = 40;\n    let numBlinks = taskCode;\n    if (taskCode < eventCodes.open_task) numBlinks = 1;\n    repeat_pulse_for(blinkTime, numBlinks);\n    if (ipcRenderer) ipcRenderer.send(\"trigger\", taskCode);\n  }\n};\n\nexport { photodiodeGhostBox, pdSpotEncode };\n","const baseStimulus = (element, prompt = false, centered = false) => {\n  const class_ = centered\n    ? \"center_container\"\n    : prompt\n    ? \"main-prompt\"\n    : \"main\";\n  return `<div class=${class_}>${element}</div>`;\n};\n\nexport { baseStimulus };\n","// NOTE - these event codes must match what is in public/config/trigger.js\nconst eventCodes = {\n\tfixation: 1,\n\tevidence: 5,\n\tshow_earnings: 7,\n\ttest_connect: 32,\n\topen_task: 18\n}\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n\teventCodes\n}\n","// config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settins can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from \"jspsych-react\";\nimport _ from \"lodash\";\nimport { eventCodes } from \"./trigger\";\nimport { init } from \"@brown-ccv/behavioral-task-trials\";\nimport { getProlificId } from \"../lib/utils\";\n\n// mapping of letters to key codes\nconst keys = {\n  A: 65,\n  B: 66,\n  C: 67,\n  F: 70,\n  J: 74,\n  space: 32,\n};\n\n// audio codes\nconst audioCodes = {\n  frequency: 100 * (eventCodes.open_task - 9),\n  type: \"sine\",\n};\n\nconst taskName = \"honeycomb template\";\n\n// is this mechanical turk?\nlet USE_MTURK = !jsPsych.turk.turkInfo().outsideTurk;\nlet USE_PROLIFIC = getProlificId() && !USE_MTURK;\nlet USE_ELECTRON = true;\nlet USE_FIREBASE = process.env.REACT_APP_FIREBASE === \"true\";\n\ntry {\n  window.require(\"electron\");\n} catch {\n  USE_ELECTRON = false;\n}\n\n\n// whether or not to ask the participant to adjust the volume\nconst USE_VOLUME = process.env.REACT_APP_VOLUME === \"true\";\n// these variables depend on USE_ELECTRON\n// whether or not to enable video\nconst USE_CAMERA = process.env.REACT_APP_VIDEO === \"true\" && USE_ELECTRON;\n// whether or not the EEG/event marker is available\nconst USE_EEG =\n  process.env.REACT_APP_USE_EEG === \"true\" && USE_ELECTRON;\n// whether or not the photodiode is in use\nconst USE_PHOTODIODE =\n  process.env.REACT_APP_USE_PHOTODIODE === \"true\" && USE_ELECTRON;\n\n// get language file\nconst lang = require(\"../language/en_us.json\");\nif (!USE_ELECTRON) {\n  // if this is mturk, merge in the mturk specific language\n  const mlang = require(\"../language/en_us.mturk.json\");\n  _.merge(lang, mlang);\n}\n\nconst defaultBlockSettings = {\n  conditions: [\"a\", \"b\", \"c\"],\n  repeats_per_condition: 1, // number of times every condition is repeated\n  is_practice: false,\n  is_tutorial: false,\n  photodiode_active: false,\n};\n\n// setting config for trials\nconst config = init({\n  USE_PHOTODIODE,\n  USE_EEG,\n  USE_ELECTRON,\n  USE_MTURK,\n  USE_VOLUME,\n  USE_CAMERA,\n  USE_PROLIFIC,\n  USE_FIREBASE\n});\n\nexport {\n  taskName,\n  keys,\n  defaultBlockSettings,\n  lang,\n  eventCodes,\n  config,\n  audioCodes,\n};\n","import { lang, taskName, config} from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { jsPsych } from 'jspsych-react'\n\n\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\nfunction saveBlob(blob, media, participantId) {\n  let reader = new FileReader()\n  let fileName =`pid_${participantId}_${media}_${Date.now()}.webm`\n  reader.onload = function() {\n      if (reader.readyState === 2) {\n          var buffer = new Buffer(reader.result)\n          ipcRenderer.send('save_video', fileName, buffer)\n          console.log(`Saving ${JSON.stringify({ fileName, size: blob.size })}`)\n      }\n  }\n  reader.readAsArrayBuffer(blob)\n}\n\nconst cameraStart = () => {\n  document.title = taskName\n  let markup = `\n  <div class=\"d-flex flex-column align-items-center\">\n  <p>${lang.instructions.camera}</p>\n  <video id=\"camera\" width=\"640\" height=\"480\" autoplay></video>\n  </div>\n  `\n  let stimulus = baseStimulus(markup, true) +\n                 photodiodeGhostBox()\n\n  return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [ lang.prompt.continue.button],\n    response_ends_trial: true,\n    on_load: () => {\n      // Grab elements, create settings, etc.\n      // Elements for taking the snapshot\n      const participantId = jsPsych.data.get().values()[0].participant_id\n\n      let camera = document.getElementById('camera');\n\n\n      const handleEvents = function(stream, recorder) {\n        console.log(stream)\n        if (recorder === \"cameraCapture\") {\n          camera.srcObject = stream;\n        }\n      \n        \n        const options = {mimeType: 'video/webm'};\n        const recordedChunks = [];\n        window[recorder] = new MediaRecorder(stream, options);\n    \n        window[recorder].addEventListener('dataavailable', function(e) {\n          if (e.data.size > 0) {\n            recordedChunks.push(e.data);\n          }\n        });\n    \n        window[recorder].addEventListener('stop', function() {\n          const blob = new Blob(recordedChunks)\n          saveBlob(blob, recorder, participantId)\n        });\n    \n      };\n    \n      navigator.mediaDevices.getUserMedia({ video: true })\n          .then((stream) => handleEvents(stream, 'cameraCapture'));\n\n      const { desktopCapturer } = window.require('electron')\n\n      desktopCapturer.getSources({ types: ['window'] }).then(async sources => {\n        for (const source of sources) {\n          if (source.name === taskName) {\n            navigator.mediaDevices.getUserMedia({\n              video: {\n                mandatory: {\n                  chromeMediaSource: 'desktop',\n                  chromeMediaSourceId: source.id\n                }\n              }\n            }).then(stream => {\n              handleEvents(stream, 'screenCapture')\n            })\n            .catch(error => console.log(error))\n          } \n        }\n      })\n    \n    },\n    on_finish: () => {\n      if (config.USE_CAMERA) {\n        try {\n          window.cameraCapture.start()\n          window.screenCapture.start()\n        } catch (error) {\n          window.alert(\"Camera permissions were not given, if you choose to proceed, your recording will not be saved. Please restart the experiment after you have given permission.\")\n        }\n        \n      }\n    }\n  }\n}\n\nconst cameraEnd = (duration) => {\n  let stimulus = baseStimulus(`<h1>${lang.task.recording_end}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: duration,\n    on_load: () => {\n      if (config.USE_CAMERA) {\n        console.log('finished')\n        try {\n          window.cameraCapture.stop()\n          window.screenCapture.stop()\n        } catch (error) {\n          window.alert(\"Your video recording was not saved\")\n        }\n        \n      }\n    }\n  }\n}\n\n\nexport {\n  cameraStart,\n  cameraEnd\n}","var map = {\n\t\"./blue_payout_correct_10.png\": 71,\n\t\"./blue_payout_correct_100.png\": 72\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 70;","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_10.f515a81e.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_100.ae2416c7.png\";","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction Login({ onLogin, envParticipantId, envStudyId, validationFunction }) {\n  // State variables for login screen\n  const [participantId, setParticipant] = useState(\"\");\n  const [studyId, setStudy] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // Update based on environment variables\n    setParticipant(envParticipantId);\n    setStudy(envStudyId);\n  }, [envParticipantId, envStudyId]);\n\n  // Checks if forms are filled in\n  function validateForm() {\n    return participantId.length > 0 && studyId.length > 0;\n  }\n\n  // Function to log in participant\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Validates fields\n    validationFunction(participantId, studyId)\n    // Logs in depending on result from promise\n    .then((loggedIn) => {\n      if (loggedIn) {\n        onLogin(loggedIn, studyId, participantId);\n      } else {\n        setError(true);\n      }\n    });\n  }\n\n  return (\n    <div className=\"centered-h-v\">\n      <div className=\"width-50\">\n        {error ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            The participant ID and study ID do not match\n          </div>\n        ) : null}\n        <Form className=\"centered-h-v\" onSubmit={handleSubmit}>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"participantId\">\n            <Form.Label>Participant ID</Form.Label>\n            <Form.Control\n              autoFocus\n              type=\"participantId\"\n              value={participantId}\n              onChange={(e) => setParticipant(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"studyId\">\n            <Form.Label>Study ID</Form.Label>\n            <Form.Control\n              type=\"studyId\"\n              value={studyId}\n              onChange={(e) => setStudy(e.target.value)}\n            />\n          </Form.Group>\n          <Button\n            style={{ width: \"100%\" }}\n            block\n            size=\"lg\"\n            type=\"submit\"\n            disabled={!validateForm()}\n          >\n            Log In\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import { lang } from '../../config/main'\n\nconst eventMarkerMessage = async () => {\n\t\treturn `<span style=\"color: green;\">${lang.eventMarker.found}</span>`\n}\n\nexport default eventMarkerMessage\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport eventMarkerMessage from '../lib/markup/eventMarkerMessage'\n\nconst holdUpMarker = () => {\n  let stimulus = baseStimulus(`<div><h2 id='usb-alert'></h2></div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    prompt: [`<br><h3>${lang.prompt.focus}</h3>`],\n    choices: [lang.prompt.continue.button],\n    on_load: () => (eventMarkerMessage()\n                      .then(s => document.getElementById('usb-alert')\n                      .innerHTML = s )\n                    )\n  }\n}\n\nexport default holdUpMarker\n","import { eventCodes, lang, audioCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { beep } from '../lib/utils'\n\nconst startCode = () => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.setting_up}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: 2000,\n    on_load: () => {\n      pdSpotEncode(eventCodes.open_task)\n      beep(audioCodes)\n    }\n\n  }\n}\n\nexport default startCode\n","import holdUpMarker from \"../trials/holdUpMarker\";\nimport startCode from \"../trials/startCode\";\nimport { lang, config } from \"../config/main\";\nimport { showMessage } from \"@brown-ccv/behavioral-task-trials\";\n\nlet timeline = [showMessage(config, {\n  responseType: \"html_button_response\",\n  message: lang.task.name,\n  responseEndsTrial: true,\n  buttons: [lang.prompt.continue.button],\n})]\nif (config.USE_PHOTODIODE) {\n  timeline.push(holdUpMarker())\n  timeline.push(startCode())\n}\n\nconst preamble = {\n  type: \"html_keyboard_response\",\n  stimulus: \"\",\n  timeline: timeline\n};\n\n\n\nexport default preamble;\n","// import trials\nimport { showMessage, fixation } from \"@brown-ccv/behavioral-task-trials\";\nimport { config } from \"../config/main\";\nimport { eventCodes } from \"../config/main\";\nimport { earningsDisplay } from \"../lib/markup/earnings\";\n\nconst taskTrial = (blockSettings, blockDetails, condition) => {\n  // timeline\n  let timeline = [\n    // fixation\n    fixation(config, {\n      duration: 650,\n    }),\n    // show condition\n    showMessage(config, {\n      message: condition,\n      onstart: true,\n      taskCode: eventCodes.evidence,\n    }),\n    fixation(config, {\n      duration: 650,\n    }),\n    // end the trial\n    showMessage(config, {\n      stimulus: earningsDisplay(Math.random()),\n      taskCode: eventCodes.show_earnings,\n    }),\n  ];\n\n  return {\n    type: \"html_keyboard_response\",\n    timeline: timeline,\n  };\n};\n\nexport default taskTrial;\n","import { formatDollars } from '../utils'\n\nconst earningsDisplay = (earnings) => {\n  const bclass = (earnings >= 0) ? 'success' : 'danger'\n  return (\n    `<div class='center_container'>\n    <h1 class='text-${bclass}'>${formatDollars(earnings)}</h1>\n    </div>`\n  )\n}\n\nexport {\n  earningsDisplay\n}\n","import taskTrial from './taskTrial'\nimport { generateStartingOpts } from '../lib/taskUtils'\n\nconst taskBlock = (blockSettings) => {\n  // initialize block\n\tconst startingOpts = generateStartingOpts(blockSettings)\n\n  const blockDetails = {\n\t  block_earnings: 0.0,\n\t\toptimal_earnings: 0.0,\n\t\tcontinue_block: true\n\t}\n\n\t// timeline = loop through trials\n\tlet timeline = startingOpts.map( (condition) => taskTrial(blockSettings, blockDetails, condition))\n\n\tlet blockStart = {\n\t\ttype: 'html_keyboard_response',\n\t\tstimulus: '',\n\t\ttrial_duration: 1,\n\t\ton_finish: (data) => data.block_settings = blockSettings\n\t}\n\n\ttimeline.unshift(blockStart)\n\n  return {\n\t\ttype: 'html_keyboard_response',\n\t\ttimeline: timeline\n\t}\n}\n\nexport default taskBlock\n","// utilities specific to this app/task\n\nimport _ from 'lodash'\n\n// initialize starting conditions for each trial within a block\nconst generateStartingOpts = (blockSettings) => {\n\tlet startingOptions = blockSettings.conditions.map( (c) => {\n\t\t// Repeat each starting condition the same number of times\n\t\treturn _.range(blockSettings.repeats_per_condition).map( () => c )\n\t})\n\n\treturn _.shuffle(_.flatten(startingOptions))\n}\n\n\nexport {\n\tgenerateStartingOpts\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// PRACTICE BLOCK SETTINGS\n\n// create copy of default settings\nlet practiceBlock = deepCopy(defaultBlockSettings)\n\npracticeBlock.conditions = [\"m\", \"n\"]\npracticeBlock.repeats_per_condition = 1\n\npracticeBlock.is_practice = true\n\n// export the settings\nexport {\n\tpracticeBlock\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// TUTORIAL SETTINGS\n\n// create copy of default settings\nlet tutorialBlock = deepCopy(defaultBlockSettings)\n\n// update default settings for tutorial\ntutorialBlock.is_tutorial = true\ntutorialBlock.photodiode_active = false\n\n// export the settings\nexport {\n\ttutorialBlock\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// FIRST EXPERIMENT BLOCK SETTINGS\n\n// create copy of default settings\nlet exptBlock1 = deepCopy(defaultBlockSettings)\n\nexptBlock1.repeats_per_condition = 2\n\n// SECOND EXPERIMENT BLOCK SETTINGS\n\n// create copy of default settings\nlet exptBlock2 = deepCopy(defaultBlockSettings)\n\nexptBlock2.conditions = [\"e\", \"f\"]\nexptBlock2.repeats_per_condition = 2\n\nexport {\n  exptBlock1,\n  exptBlock2,\n}\n","import { lang, config } from \"../config/main\";\nimport {\n  survey,\n  slider,\n  multiSurvey,\n  showMessage,\n} from \"@brown-ccv/behavioral-task-trials\";\n\n// Age Check\nconst ask = lang.quiz.ask.age;\nconst res = lang.quiz.answer.age;\nconst stmAge = `<div class='instructions'><h1>${ask}<br><b>${res}</b></div>`;\n\nconst ageCheck = survey({ stimulus: stmAge });\n\n// Slider Check\nconst stmSl = lang.quiz.direction.slider.right;\n\nconst sliderCheck = slider(stmSl);\n\nconst abstain = `${lang.quiz.answer.abstain}`; // give people choice to abstain\n// Survey page headers\nconst surveyPreamble1 = lang.quiz.prompt.preamble.survey_1;\nconst surveyPreamble2 = lang.quiz.prompt.ius.preamble;\n\n// Intolerance of Uncertainty (IUS) Scale\nconst iusOptions = {\n  options: [\n    `${lang.quiz.answer.ius.not}`,\n    `${lang.quiz.answer.ius.little}`,\n    `${lang.quiz.answer.ius.somewhat}`,\n    `${lang.quiz.answer.ius.very}`,\n    `${lang.quiz.answer.ius.entirely}`,\n    abstain,\n  ],\n};\n\nconst iusPrompts = [\n  `${lang.quiz.prompt.ius.upset}`,\n  `${lang.quiz.prompt.ius.frustration}`,\n  `${lang.quiz.prompt.ius.full_life}`,\n  `${lang.quiz.prompt.ius.surprise_avoid}`,\n  `${lang.quiz.prompt.ius.unforeseen_spoil}`,\n  `${lang.quiz.prompt.ius.uncertainty_paralysis}`,\n  `${lang.quiz.prompt.ius.uncertainty_malfunction}`,\n  `${lang.quiz.prompt.ius.future}`,\n  `${lang.quiz.prompt.ius.surprise_intolerance}`,\n  `${lang.quiz.prompt.ius.doubt_paralysis}`,\n  `${lang.quiz.prompt.ius.organize}`,\n  `${lang.quiz.prompt.ius.escape}`,\n];\n\nconst iusSurvey = multiSurvey({\n  preamble: [surveyPreamble1 + surveyPreamble2],\n  prompts: iusPrompts,\n  ansChoices: iusOptions,\n});\n\n// Debrief Page (non-mTurk)\nconst debriefOptions = lang.quiz.answer.debriefing.confirm_completion;\nconst debrief = showMessage(config, {\n  responseType: \"html_button_response\",\n  responseEndsTrial: true,\n  buttons: [debriefOptions],\n});\n\n// START of Demographics Questionnaires\nconst demographicsAge = lang.quiz.ask.demographics_age;\nconst demographicsPreamble1 = lang.quiz.prompt.preamble.demo_1;\nconst demographicsPreamble2 = lang.quiz.prompt.preamble.demo_2;\nconst demographicsPreamble3 = lang.quiz.prompt.preamble.demo_3;\n\nconst openAnswerQuestions = survey({\n  preamble: demographicsPreamble1,\n  stimulus: demographicsAge,\n});\n\n// multi_choice_questions\nconst demoMultiChoiceOptions = {\n  ethnicity: [\n    lang.quiz.answer.demographics_ethnicity.hispanic_latino,\n    lang.quiz.answer.demographics_ethnicity.no_hispanic_latino,\n  ],\n  race: [\n    `${lang.quiz.answer.demographics_race.asian}`,\n    `${lang.quiz.answer.demographics_race.african_american}`,\n    `${lang.quiz.answer.demographics_race.caucasian}`,\n    `${lang.quiz.answer.demographics_race.native_american_alaskan}`,\n    `${lang.quiz.answer.demographics_race.native_hawaiian_pacific_islander}`,\n    `${lang.quiz.answer.demographics_race.other}`,\n  ],\n  yesNo: [\n    lang.quiz.answer.demographics_binary.yes,\n    lang.quiz.answer.demographics_binary.no,\n  ],\n  gender: [\n    lang.quiz.answer.demographics_gender.female,\n    lang.quiz.answer.demographics_gender.male,\n    lang.quiz.answer.demographics_gender.other,\n  ],\n};\n\nconst demoMultiChoicePrompts = [\n  `${lang.quiz.ask.demographics_ethnicity}`,\n  `${lang.quiz.ask.demographics_race}`,\n  `${lang.quiz.ask.demographics_english}`,\n  `${lang.quiz.ask.demographics_gender}`,\n];\n\nconst multiChoiceQuestions = multiSurvey({\n  preamble: demographicsPreamble2,\n  prompts: demoMultiChoicePrompts,\n  ansChoices: demoMultiChoiceOptions,\n});\n\n// multi_select_questions\nconst diagnosesQuestions = lang.quiz.ask.diagnoses;\n\nconst diagnosesOptions = {\n  diagnoses: [\n    lang.quiz.answer.demographics_diagnoses.no,\n    lang.quiz.answer.demographics_diagnoses.parkinsons,\n    lang.quiz.answer.demographics_diagnoses.schizophrenia,\n    lang.quiz.answer.demographics_diagnoses.ocd,\n    lang.quiz.answer.demographics_diagnoses.depression,\n  ],\n};\n\nconst multiSelectQuestions = multiSurvey({\n  responseType: \"survey_multi_select\",\n  preamble: demographicsPreamble3,\n  prompts: [diagnosesQuestions],\n  ansChoices: diagnosesOptions,\n});\n\n// demographics\nconst demographics = {\n  timeline: [\n    openAnswerQuestions, // age, sex\n    multiChoiceQuestions, // ethnicity, race, english_fluency\n    multiSelectQuestions, // diagnoses\n  ],\n};\n\nexport { ageCheck, sliderCheck, iusSurvey, debrief, demographics };\n","import preamble from \"./preamble\";\nimport taskBlock from \"./taskBlock\";\nimport { countdown } from \"@brown-ccv/behavioral-task-trials\";\nimport { cameraStart, cameraEnd } from \"../trials/camera\"\nimport { lang, config } from \"../config/main\";\nimport { practiceBlock } from \"../config/practice\";\nimport { tutorialBlock } from \"../config/tutorial\";\nimport { exptBlock1, exptBlock2 } from \"../config/experiment\";\nimport { showMessage } from \"@brown-ccv/behavioral-task-trials\";\nimport {\n  ageCheck,\n  sliderCheck,\n  demographics,\n  iusSurvey,\n  debrief,\n} from \"../trials/quizTrials\";\n\nlet primaryTimeline = [\n  preamble,\n  ageCheck,\n  sliderCheck,\n  countdown({ message: lang.countdown.message1 }),\n  taskBlock(practiceBlock),\n  countdown({ message: lang.countdown.message2 }),\n  taskBlock(exptBlock1),\n  demographics,\n  iusSurvey,\n  debrief,\n];\n\nif (config.USE_CAMERA) {\n  primaryTimeline.splice(1,0,cameraStart())\n  primaryTimeline.push(cameraEnd(5000))\n}\n\nprimaryTimeline.push(showMessage(config, {\n  duration: 5000,\n  message: lang.task.end,\n}))\n\nconst mturkTimeline = [\n  preamble,\n  countdown({ message: lang.countdown.message1 }),\n  taskBlock(tutorialBlock),\n  countdown({ message: lang.countdown.message2 }),\n  taskBlock(exptBlock2),\n  showMessage(config, {\n    duration: 5000,\n    message: lang.task.end,\n  }),\n];\n\nexport const tl = config.USE_MTURK ? mturkTimeline : primaryTimeline;\n","import React from \"react\";\nimport { Experiment } from \"jspsych-react\";\nimport { tl } from \"../timelines/main\";\n\nfunction JsPsychExperiment({ dataUpdateFunction, dataFinishFunction }) {\n\n  return (\n    <div className=\"App\">\n      <Experiment\n        settings={{\n          timeline: tl,\n          on_data_update: (data) => dataUpdateFunction(data),\n          on_finish: (data) => dataFinishFunction(data),\n        }}\n      />\n    </div>\n  );\n}\nexport default JsPsychExperiment;\n","import firebase from \"firebase\";\nimport 'firebase/firestore';\n\nrequire(\"dotenv\").config();\n\n// Set collection name\nconst collectionName = \"participant_responses\";\n\n// Firebase config\nlet config = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL: process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId || \"no-firebase\",\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n};\n\n\n// Get a Firestore instance\nvar db = firebase.initializeApp(config).firestore();\n\n// Use emulator if on localhost\nif (window.location.hostname === \"localhost\") {\n  db.useEmulator(\"localhost\", 8080);\n}\n\n// Add participant data and trial data to db\nconst initParticipant = (participantId, studyId, startDate) => {\n  // return promise with value true if participant and study id match, false otherwise\n    return db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .set({ start_time: startDate, app_version: window.navigator.appVersion, app_platform: window.navigator.platform, results: []})\n    .then(()=>{\n      return true\n    })\n    .catch((error) => {\n      return false\n    });\n};\n\n// Add inidividual trials to db\nconst addToFirebase = (data) => {\n  console.log(data)\n  const participantId = data.participant_id;\n  const studyId = data.study_id;\n  const startDate = data.start_date\n  \n  db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .update('results', firebase.firestore.FieldValue.arrayUnion(data))\n};\n\n// Export types that exists in Firestore\nexport {\n  db,\n  collectionName,\n  initParticipant,\n  addToFirebase\n};\n\nexport default firebase;","import React, { useState, useEffect, useCallback } from 'react'\n\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nimport Login from './components/Login'\nimport JsPsychExperiment from './components/JsPsychExperiment'\n\nimport { jsPsych } from 'jspsych-react'\nimport { getTurkUniqueId, getProlificId, sleep } from './lib/utils'\nimport { initParticipant, addToFirebase } from './firebase'\n\nimport { config } from './config/main'\nimport { version } from '../package.json'\n\nfunction App () {\n  // Variables for time\n  const startDate = new Date().toISOString()\n  // Variables for login\n  const [loggedIn, setLogin] = useState(false)\n  const [ipcRenderer, setRenderer] = useState(false)\n  const [psiturk, setPsiturk] = useState(false)\n  const [envParticipantId, setEnvParticipantId] = useState('')\n  const [envStudyId, setEnvStudyId] = useState('')\n  const [currentMethod, setMethod] = useState('default')\n  const [reject, setReject] = useState(false)\n\n  const query = new URLSearchParams(window.location.search)\n\n  // Validation functions for desktop case and firebase\n  const defaultValidation = async () => {\n    return true\n  }\n  const firebaseValidation = (participantId, studyId) => {\n    return initParticipant(participantId, studyId, startDate)\n  }\n\n  // Adding data functions for firebase, electron adn Mturk\n  const defaultFunction = () => {}\n  const firebaseUpdateFunction = (data) => {\n    addToFirebase(data)\n  }\n  const desktopUpdateFunction = (data) => {\n    ipcRenderer.send('data', data)\n  }\n  const psiturkUpdateFunction = (data) => {\n    psiturk.recordTrialData(data)\n  }\n\n  // On finish functions for electron, Mturk\n  const defaultFinishFunction = () => {\n    jsPsych.data.get().localSave('csv', 'neuro-task.csv')\n  }\n  const desktopFinishFunction = () => {\n    ipcRenderer.send('end', 'true')\n  }\n  const psiturkFinishFunction = () => {\n    const completePsiturk = async () => {\n      psiturk.saveData()\n      await sleep(5000)\n      psiturk.completeHIT()\n    }\n    completePsiturk()\n  }\n\n  // Function to add jspsych data on login\n  const setLoggedIn = useCallback(\n    (loggedIn, studyId, participantId) => {\n      if (loggedIn) {\n        jsPsych.data.addProperties({\n          participant_id: participantId,\n          study_id: studyId,\n          start_date: startDate,\n          task_version: version\n        })\n      }\n      setLogin(loggedIn)\n    },\n    [startDate]\n  )\n\n  // Login logic\n  useEffect(() => {\n    // For testing and debugging purposes\n    console.log('Turk:', config.USE_MTURK)\n    console.log('Firebase:', config.USE_FIREBASE)\n    console.log('Prolific:', config.USE_PROLIFIC)\n    console.log('Electron:', config.USE_ELECTRON)\n    console.log('Video:', config.USE_CAMERA)\n    console.log('Volume:', config.USE_VOLUME)\n    console.log('Event Marker:', config.USE_EEG)\n    console.log('Photodiode:', config.USE_PHOTODIODE)\n    // If on desktop\n    if (config.USE_ELECTRON) {\n      const { ipcRenderer } = window.require('electron')\n      setRenderer(ipcRenderer)\n      ipcRenderer.send('updateEnvironmentVariables', config)\n      // If at home, fill in fields based on environment variables\n      const credentials = ipcRenderer.sendSync('syncCredentials')\n      if (credentials.envParticipantId) {\n        setEnvParticipantId(credentials.envParticipantId)\n      }\n      if (credentials.envStudyId) {\n        setEnvStudyId(credentials.envStudyId)\n      }\n      setMethod('desktop')\n    } else {\n      // If MTURK\n      if (config.USE_MTURK) {\n        /* eslint-disable */\n        window.lodash = _.noConflict()\n        const turkId = getTurkUniqueId()\n        setPsiturk(new PsiTurk(turkId, '/complete'))\n        setMethod('mturk')\n        setLoggedIn(true, 'mturk', turkId)\n        /* eslint-enable */\n      } else if (config.USE_PROLIFIC) {\n        const pID = getProlificId()\n        if (config.USE_FIREBASE && pID) {\n          setMethod('firebase')\n          setLoggedIn(true, 'prolific', pID)\n        } else {\n          setReject(true)\n        }\n      } else if (config.USE_FIREBASE) {\n        setMethod('firebase')\n        // Autologin with query parameters\n        const participantId = query.get('participantID')\n        const studyId = query.get('studyID')\n        if (participantId) {\n          setEnvParticipantId(participantId)\n        }\n        if (studyId) {\n          setEnvStudyId(studyId)\n        }\n      } else {\n        setMethod('default')\n      }\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  if (reject) {\n    return (\n      <div className=\"centered-h-v\">\n        <div className=\"width-50 alert alert-danger\">\n          Please ask your task provider to enable firebase.\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <>\n        {loggedIn ? (\n          <JsPsychExperiment\n            dataUpdateFunction={\n              {\n                desktop: desktopUpdateFunction,\n                firebase: firebaseUpdateFunction,\n                mturk: psiturkUpdateFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n            dataFinishFunction={\n              {\n                desktop: desktopFinishFunction,\n                mturk: psiturkFinishFunction,\n                firebase: defaultFunction,\n                default: defaultFinishFunction\n              }[currentMethod]\n            }\n          />\n        ) : (\n          <Login\n            validationFunction={\n              {\n                desktop: defaultValidation,\n                default: defaultValidation,\n                firebase: firebaseValidation,\n              }[currentMethod]\n            }\n            envParticipantId={envParticipantId}\n            envStudyId={envStudyId}\n            onLogin={setLoggedIn}\n          />\n        )}\n      </>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}