name: CI Tests

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    paths:
      - "src/**"
      - "public/**"
      - ".github/workflows/main.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      # Set up js package
      - uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Set package version and name
        uses: brown-ccv/gh-actions/get-package-info@main
        id: package_info

      # install, test, build package
      - name: npm install
        run: npm install
      - name: npm build
        run: npm run build
      - name: npm test
        run: npm test
        env:
          CI: true

      # Build electron app package installers
      - name: package electron - windows
        if: startsWith(matrix.os, 'windows')
        run: npm run package:windows
      - name: package electron - linux
        if: startsWith(matrix.os, 'ubuntu')
        run: npm run package:linux
      - name: package electron - mac
        if: startsWith(matrix.os, 'mac')
        run: npm run package:mac
      - name: npm rebuild - mac
        if: startsWith(matrix.os, 'mac')
        run: npm rebuild
      - name: Mac installer
        if: startsWith(matrix.os, 'mac')
        run: npm run installer:mac

      # Upload installers to github action
      - name: upload win-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'windows')
        with:
          name: win-installer
          path: dist/installers/${{ steps.package_info.outputs.package_name }}-${{ steps.package_info.outputs.package_version }}-setup.exe
      - name: upload mac-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'mac')
        with:
          name: mac-installer
          path: dist/installers/${{ steps.package_info.outputs.package_name }}-${{ steps.package_info.outputs.package_version }}.dmg
      - name: upload linux-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: linux-installer
          path: dist/installers/${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.package_version }}_x64.deb

      # Build PsiTurk - linux only
      - name: Set up Python 3.7
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install PsiTurk
        if: startsWith(matrix.os, 'ubuntu')
        run: pip install psiturk
      - name: Create Psiturk Build
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          cd psiturkit
          ./psiturk-it -p ${{ steps.package_info.outputs.package_name }}-psiturk
      - name: Upload PsiTurk Build
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: psiturk-build
          path: psiturkit/${{ steps.package_info.outputs.package_name }}-psiturk
