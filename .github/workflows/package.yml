name: package

# Workflow dispatch for packaging an electron executable
on:
  workflow_dispatch:
    inputs:
      location:
        # TODO: Home doesn't make sense here?
        description: Build for "online" or "clinic"
        required: true
        default: "clinic"
      os:
        description: Which OS to target - "win", "mac", "linux", "all"
        required: true
        default: "win"

jobs:
  package:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ${{
          (github.event.inputs.os == 'all' && fromJSON('["ubuntu-latest", "macOS-latest", "windows-latest"]')) ||
          (github.event.inputs.os == 'win' && fromJSON('["windows-latest"]')) ||
          (github.event.inputs.os == 'mac' && fromJSON('["macOS-latest"]')) ||
          (github.event.inputs.os == 'linux' && fromJSON('["ubuntu-latest"]')) }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3
      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: ./package.json

      - name: Set Package Version and Name
        uses: brown-ccv/gh-actions/get-package-info@main
        id: package_info

      - name: üì• Install Dependencies
        run: npm ci

      # Build the project for the given location
      - name: build
        run: npm run build:${{github.event.inputs.location}}

      # Package electron app package installers for the given OS(s)
      # TODO: Add zip
      - name: üì¶ Package for Windows
        if: startsWith(matrix.os, 'windows')
        run: npm run make:windows
      - name: üì¶ Package for Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: npm run make:linux
      - name: üì¶ Package for macOS
        if: startsWith(matrix.os, 'mac')
        run: npm run make:mac

      # Upload installers to github action
      # TODO: Electron forge package should let us upload the artificats automatically https://www.electronforge.io/cli#publish
      - name: üîº Upload Installer (Windows)
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'windows')
        with:
          name: ${{ format('win-installer-{0}', github.event.inputs.location) }}
          path: out/make/squirrel.windows/x64/${{ steps.package_info.outputs.package_name }}-${{ steps.package_info.outputs.package_version }} Setup.exe
      - name: üîº Upload Installer (Linux)
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: ${{ format('linux-installer-{0}', github.event.inputs.location) }}
          path: out/make/deb/x64/${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.package_version }}_amd64.deb
      - name: üîº Upload Installer (macOS)
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'mac')
        with:
          name: ${{ format('mac-installer-{0}', github.event.inputs.location) }}
          path: out/make/${{ steps.package_info.outputs.package_name }}-${{ steps.package_info.outputs.package_version }}-x64.dmg

      # Build PsiTurk - linux only
      - name: Set up Python 3.7
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install PsiTurk
        if: startsWith(matrix.os, 'ubuntu')
        run: pip install psiturk
      - name: Create Psiturk Build
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          cd psiturkit
          ./psiturk-it -p ${{ steps.package_info.outputs.package_name }}-psiturk
      - name: Upload PsiTurk Build
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: psiturk-build
          path: psiturkit/${{ steps.package_info.outputs.package_name }}-psiturk
