name: package

# Workflow dispatch for packaging an electron executable
on:
  workflow_dispatch:
    inputs:
      setting:
        description: Build for "home" or "clinic"
        required: true
        default: "home"
      os:
        description: Which OS to target - "win", "mac", "linux", "all"
        required: true
        default: "win"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ${{
          (github.event.inputs.os == 'all' && fromJSON('["ubuntu-latest", "macOS-latest", "windows-latest"]')) ||
          (github.event.inputs.os == 'win' && fromJSON('["windows-latest"]')) ||
          (github.event.inputs.os == 'mac' && fromJSON('["macOS-latest"]')) ||
          (github.event.inputs.os == 'linux' && fromJSON('["ubuntu-latest"]')) }}

    steps:
      # Rewrite "git:" repo urls to use "https:" instead, since GitHub Actions blocks port 9418 (as of Jan 2022).
      # TODO: What repo is causing this issue? (event-marker dependency?)
      # - name: Rewrite "git:" repo urls to use "https:" instead.
      # run: git config --global url."https://github.com/".insteadOf "git://github.com/"

      # Set up js package
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: Set package version and name
        uses: brown-ccv/gh-actions/get-package-info@main
        id: package_info

      # Install dependencies
      - name: ci
        run: npm ci

      # Load the needed environment variables
      - name: Load .env file - .env.${{github.event.inputs.setting}}
        uses: xom9ikk/dotenv@v1.0.2
        with:
          path: ./env
          mode: ${{github.event.inputs.setting}}
      - name: build
        run: npm run build
      - name: test
        run: npm test
        env:
          CI: true

      # Build electron app package installers
      # TODO: These package commands are really using "make"
      - name: package electron - windows
        if: startsWith(matrix.os, 'windows')
        run: npm run package:windows
      - name: package electron - linux
        if: startsWith(matrix.os, 'ubuntu')
        run: npm run package:linux
      - name: package electron - mac
        if: startsWith(matrix.os, 'mac')
        run: npm run package:mac

      # Upload installers to github action
      # TODO: Can this be accomplished with electron forge? https://www.electronforge.io/cli#publish
      - name: upload win-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'windows')
        with:
          name: ${{ format('win-installer-{0}', github.event.inputs.setting) }}
          path: out/make/squirrel.windows/x64/${{ steps.package_info.outputs.package_name }}-${{ steps.package_info.outputs.package_version }} Setup.exe
      - name: upload mac-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'mac')
        with:
          name: ${{ format('mac-installer-{0}', github.event.inputs.setting) }}
          path: out/make/${{ steps.package_info.outputs.package_name }}-${{ steps.package_info.outputs.package_version }}-x64.dmg
      - name: upload linux-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: ${{ format('linux-installer-{0}', github.event.inputs.setting) }}
          path: out/make/deb/x64/${{ steps.package_info.outputs.package_name }}_${{ steps.package_info.outputs.package_version }}_amd64.deb

      # Build PsiTurk - linux only
      - name: Set up Python 3.7
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install PsiTurk
        if: startsWith(matrix.os, 'ubuntu')
        run: pip install psiturk
      - name: Create Psiturk Build
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          cd psiturkit
          ./psiturk-it -p ${{ steps.package_info.outputs.package_name }}-psiturk
      - name: Upload PsiTurk Build
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: psiturk-build
          path: psiturkit/${{ steps.package_info.outputs.package_name }}-psiturk
